// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Class struct {
	CourseID      int    `json:"course_id"`
	Subject       string `json:"subject"`
	CatalogNumber string `json:"catalog_number"`
	Title         string `json:"title"`
}

type Contact struct {
	ContactType ContactType `json:"contact_type"`
	Value       string      `json:"value"`
}

type ContactInput struct {
	ContactType ContactType `json:"contact_type"`
	Value       string      `json:"value"`
}

type Meeting struct {
	DayTimes string `json:"dayTimes"`
	Location string `json:"location"`
}

type NewUser struct {
	GoogleID   int    `json:"google_id"`
	GivenName  string `json:"given_name"`
	FamilyName string `json:"family_name"`
}

type Section struct {
	SectionID     int        `json:"section_id"`
	UsersTaking   []int      `json:"users_taking"`
	SectionNumber string     `json:"SectionNumber"`
	Instructor    string     `json:"Instructor"`
	Meetings      []*Meeting `json:"Meetings"`
}

type User struct {
	GoogleID       int        `json:"google_id"`
	CreatedAt      int        `json:"created_at"`
	LastModifiedAt int        `json:"last_modified_at"`
	GivenName      string     `json:"given_name"`
	FamilyName     string     `json:"family_name"`
	Contacts       []*Contact `json:"contacts"`
	Taking         []int      `json:"taking"`
}

type ContactType string

const (
	ContactTypeSchoolemail   ContactType = "SCHOOLEMAIL"
	ContactTypePersonalemail ContactType = "PERSONALEMAIL"
	ContactTypeInstagram     ContactType = "INSTAGRAM"
	ContactTypeMessenger     ContactType = "MESSENGER"
	ContactTypeGroupme       ContactType = "GROUPME"
	ContactTypePhone         ContactType = "PHONE"
)

var AllContactType = []ContactType{
	ContactTypeSchoolemail,
	ContactTypePersonalemail,
	ContactTypeInstagram,
	ContactTypeMessenger,
	ContactTypeGroupme,
	ContactTypePhone,
}

func (e ContactType) IsValid() bool {
	switch e {
	case ContactTypeSchoolemail, ContactTypePersonalemail, ContactTypeInstagram, ContactTypeMessenger, ContactTypeGroupme, ContactTypePhone:
		return true
	}
	return false
}

func (e ContactType) String() string {
	return string(e)
}

func (e *ContactType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ContactType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ContactType", str)
	}
	return nil
}

func (e ContactType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
